export const ValidationMsgs = {
  common: {
    vendorIdRequired: "Vendor is required.",
    vendorIdTypeError: "This value must be a number.",
    brandIdRequired: "Brand is required.",
    brandIdTypeError: "Brand must be a number.",
    storeIdRequired: "Store is required.",
    storeIdTypeError: "Store ID must be a number.",
    categoryIdRequired: "Category is required.",
    phoneRequired: "Phone number is required.",
    phoneMatches: "Please enter a valid phone number.",
    recStatusRequired: "Status is required.",
    emailRequired: "Email is required.",
    Email: "Please Enter a valid Email.",
    productstatus: "Product status is required.",
    seoConfigConnection: "Connection is required.",
    seoConfigApiKey: "Api Key is required.",
    socialOptionName: "Option Name is required.",
    socialOptionUrl: "Option Url is required.",
    serverError: "Something went wrong. Please try again.",
    EmailPasswordRequired: "Email or password is not valid.",
    firstNameRequired: "First name is required.",
    lastNameRequired: "Last name is required.",
    addressRequired: "Address is required.",
    cityRequired: "City is required.",
    stateRequired: "State is required.",
    countryRequired: "Country is required.",
    postalCodeRequired: "Postal code is required.",
    postalCodeLength:
      "Postal code length can not be greater than six characters.",
    faxLength: "Fax number length can not be greater than 15 characters.",
    countryCodeLength:
      "Country code length can not be greater than three characters.",
    productNotFound: "Product not found.",
    tabValidation: "Tab has form validation.",
    otpNotSend: "OTP was not Send",
    importFileRequired: "Import File is required.",
    notAValidFileType: "Not a valid file type",
    maxFileSizeIs: "Max allowed size is 20mb",
    exportFileRequired: "Export File is required.",
    otpSend:
      "Verification code was been sent to your email address. Enter the code to continue.",
    minpercentage: "Percentage must be greater than 0.",
    maxpercentage: "Percentage must be less than or equal to 100.",
    corporateName: "Corporate name is required.",
    FieldSpaceCheck: "This field cannot contain only backspaces",
    URL: "URL is required",
    validURL: "Please enter a valid URL",
    dstFile: "Please choose DST file only.",
    noDataFound: "No data found as of now.",
  },

  masterCatalog: {
    basicInformation: {
      nameRequired: "Product name is required.",
      bundleNameRequired: "Bundle name is required.",
      nameInERPRequired: "ERP name is required.",
      erpItemIdRequired: "ERP ID is required.",
      vendorSKURequired: "Vendor SKU is required.",
      ourSKURequired: "Product SKU is required.",
      producttypeIdRequired: "Product type ID is required.",
      companionProductRequired: "Companion Product is required. ",
      taxCodeRequired: "Tax code is required.",
      categoryIdRequired: "Category is required.",
      descriptionRequired: "Product description is required.",
      shortDescriptionRequired: "Short description is required.",
      widthRequired: "Width is required.",
      heightRequired: "Height is required.",
      lengthRequired: "Length is required.",
      volumeRequired: "Volume is required.",
      weightInLBSRequired: "Weight in LBS is required.",
      shipWeightinLBSRequired: "Ship weight is required.",
      created: "Basic information is created successfully.",
      notCreated: "Basic information is not created.",
      updated: "Basic information is updated successfully.",
      notUpdated: "Basic information is not updated.",
      seNameRequired: "SE Name is required.",
    },
    seo: {
      pagetitleRequired: "Page title is required.",
      seNameRequired: "Page URL is required.",
      metadescriptionRequired: "Meta description is required.",
      metaKeywordsRequired: "Meta keywords are required.",
      opengraphtitleRequired: "Open Graph title is required.",
      opengraphdescriptionRequired: "Open graph description is required.",
      created: "SEO information is created successfully.",
      notCreated: "SEO information is not created.",
      updated: "SEO information is updated successfully.",
      notUpdated: "SEO information is not updated.",
    },
    attributes: {
      optionNameRequired: "Option name is required.",
      productTypeRequired: "Product type is required.",
      optionValueRequired: "Option value is required.",
      suffixRequired: "Suffix is required.",
      displayOrderRequired: "Display Order is required.",
      altTagRequired: "Alt tag is required.",
      attributeValueRequired: "Attribute value is required.",
      attributeSynced: "Attribute is successfully synced with Store.",
      attributeNotSynced: "Attribute is not synced with Store.",
      imageUpdated: "Attribute image is updated successfully.",
      imageNotUpdated: "Attribute image is not updated.",
      combinationCreated:
        "Attribute combination is create/updated successfully.",
      combinationNotCreated: "Attribute combination is not created.",
      combinationStatusUpdated:
        "Attribute combination status is changed successfully.",
      combinationStatusNotUpdated: "Attribute combination status not changed.",
      attributeDetailsMsg:
        "This will remove your existing options and generate new options by selection. Do you want to continue?.",
      elseAttributeDetailMsg:
        "Size options are not available for the selected variant.",
    },
    customerFaqs: {
      questionRequired: "Question is required.",
      answerRequired: "Answer is required.",
      created: "Customer FAQ is created successfully.",
      notCreated: "Customer FAQ is not created.",
      deleted: "Customer FAQ is deleted successfully.",
      notDeleted: "Customer FAQ is not deleted.",
      statusUpdated: "Customer FAQ status is updated successfully.",
      statusNotUpdated: "Customer FAQ status is not updated.",
      deletePermanently:
        "Deleting this FAQ will permanently remove this record from your account. This can't be undone.",
    },
    customerReviews: {
      deleted: "Customer review is deleted successfully.",
      notDeleted: "Customer review is not deleted.",
      statusUpdated: "Customer review status is updated successfully.",
      statusNotUpdated: "Customer review status is not updated.",
      deletePermanently:
        "Deleting this review will permanently remove this record from this Product. This can't be undone.",
    },
    facet: {
      created: "Filter & Facet is created successfully.",
      notCreated: "Filter & Facet is not created.",
      deleted: "Filter & Facet is deleted successfully.",
      notDeleted: "Filter & Facet is not deleted.",
    },
    inventory: {
      skuRequired: "SKU is required.",
      created: "Inventory created/updated successfully.",
      notCreated: "Inventory is not created/updated.",
      Updated: "Ecom Safety Quantity is updated successfully.",
      NotUpdated: "Ecom Safety Quantity is not updated successfully.",
    },
    pricing: {
      ourCostRequired: "OUR cost is required.",
      msrpRequired: "MSRP is required.",
      imapRequired: "IMAP is required.",
      salePriceRequired: "Sale price is required.",
      giftWrapRequired: "Gift wrap Price is required.",
      updated: "Pricing is updated successfully.",
      notUpdated: "Pricing is not updated.",
      salesLassThenMSRP: "Sales price must be less than MSRP.",
      outCostlessThanMSRP: "Our cost must be less than or equals MSRP.",
      imaplessThanMSRP: "Imap must be less than or equals MSRP.",
    },
    skuSwap: {
      newSKURequired: "New SKU is required.",
      updated: "SKU is updated successfully.",
      notUpdated: "SKU is not updated.",
    },
    vendorSKU: {
      updated: "Vendor SKU is updated successfully.",
      notUpdated: "Vendor SKU is not updated.",
      added: "Vendor is added successfully.",
      notAdded: "Vendor is not added.",
    },
    products: {
      statusUpdated: "Product status is Changed successfully",
      statusNotUpdated: "Product status is not changed.",
      Deleted: "Product is deleted successfully.",
      notDeleted: "Product is not deleted.",
      ProductDiscontinuesuccessfully: "Product is Discontinued successfully",
      ProductDiscontinue: "Product is not Discontinued",
      notDiscontinue: "This product is not available in any store.",
    },
    Store: {
      brand: {
        nameRequired: "Brand name is required.",
        seTitleRequired: "SEO title is required.",
        seKeywordRequired: "SEO keyword is required.",
        seDescriptionRequired: "SEO description is required.",
        brandNotCreated: "Brand is not created.",
        vendorNotStored: "Vendor is not stored.",
        brandCreated: "Brand is created successfully",
        brandUpdated: "Brand is updated successfully",
        brandNotUpdated: "Brand is not updated.",
      },
      catalog: {
        displayOrderTypeError: "Please enter valid display order.",
        displayOrderRequired: "Display order required.",
        catalogFileNameRequired: "Catalog file name is required.",
        catalogFileRequired: "Catalog file is required.",
        catalogLogoRequired: "Catalog logo is required.",
      },
    },
    additionalInformation: {
      updated: "Additional information is updated successfully.",
      notUpdated: "Additional information is not updated.",
    },
  },

  store: {
    nameRequired: "Name is required.",
    storeTypeIdRequired: "Store Type is required.",
    prefixRequired: "Store prefix is required.",
    navCodeRequired: "Store nav code is required.",
    attributeidRequired: "Attribute is required.",
    firstLineCharges: "First line charges is required.",
    secondLineCharges: "Second line charges is required.",
    smallRunLimit: "Small run limit quantity is required.",
    smallRunFeesCharges: "Small run fees charges is required.",
    logoSetupCharges: "Logo set-up charges is required.",
    generalAmount: "Please enter minimum free shipping amount",
    shippingServiceId: "Shipping Service is Required",
    shippingMethodId: "Shipping Method is Required",
    sewOutCharges: "Please enter Sew-Out amount.",
    storeCreated: "Store is created successfully",
    storeNotCreated: "Store is not created.",
    storeUpdated: "Store is updated successfully.",
    storeNotUpdated: "Store is not updated.",
    statusUpdated: "Store status changed successfully",
    statusNotUpdated: "Store status is not changed.",
    storeDeleted: "Store deleted successfully.",
    storeNotDeleted: "Store is not deleted.",
    shippingDeleted: "Shipping Price deleted successfully.",
    shippingNotDeleted: "Shipping is not deleted.",
    deletePermanently:
      "Deleting these store will permanently remove this record from your account. This can't be undone.",
    created: "Store SEO is created successfully.",
    notCreated: "Store SEO is not created.",
    updated: "Store SEO is updated successfully.",
    notUpdated: "Store SEO is not updated successfully.",
    publish: "Product published successfully.",
    notPublish: "Product not published.",
    productOrder: {
      orderChanged: "Product order changes successfully.",
      productFound: "Product found successfully.",
    },
    brandOrder: {
      orderChanged: "Brand order changes successfully.",
    },
    footer: {
      updated: "Footer updated successfully.",
      notupdated: "Footer not updated.",
    },
    customCss: {
      updated: "Custom Css updated successfully.",
      notupdated: "Custom Css not updated.",
    },
    customScript: {
      updated: "Custom Script updated successfully.",
      notupdated: "Custom Script not updated.",
    },
    googleTags: {
      updated: "Google Tags updated successfully.",
      notupdated: "Google Tags not updated.",
    },
    categoryOrder: {
      orderChanged: "Category order changes successfully.",
    },
    contactInfo: {
      company_address: "company address is required.",
      updated: "Contact Info updated successfully.",
      notupdated: "Contact Info not updated.",
    },
    socialMediaLink: {
      linkUpdated: "Social Media Links updated successfully.",
      linkNotupdated: "Social Media Links not updated. ",
      notupdated: "Contact Info not updated.",
    },
    firstLogoCharges: "First Logo Charges Required",
    secondLogoCharges: "Second Logo Charges Required",
  },

  seoConfig: {
    nameRequired: "Name is required.",
    urlRequired: "URL is required.",
    headTagCodeGTM: "Head tag code is required.",
    bodyTagCodeGTM: "Body tag code is required.",
    headTagCodePinterest: "Head verification tag is required.",
    htmlVerificationBodyPinterest: "Body verification tag is required.",
    verificationTagsHead: "Head verification tag is required.",
    verificationTagsBody: "Body verification tag is required.",
    verificationCodeRequired: "Verification code is required.",
    affiliateConnectionRequired: "Connection is required.",
    apiKeyRequired: "API key is required.",
    socialInfoUpdated: "Social information is updated successfully.",
    socialInfoNotUpdated: "Social information is not updated.",
    SocialDeleted: "Product is deleted successfully",
    SocialNotDeleted: "Product is not deleted successfully",
    socialDataAdded: "Data is added successfully.",
    socialDataNotAdded: "Data is not added.",
    socialDataUpdated: "Data is updated successfully.",
    socialDataNotUpdated: "Data is not updated.",
    created: "SeoConfiguration is created successfully.",
    notCreated: "SeoConfiguration is not created.",
    updated: "SeoConfiguration is updated successfully.",
    notUpdated: "SeoConfiguration is not updated successfully.",
  },

  product: {
    navSyncSuccess: "Product nav synchronization successfully.",
    navSyncFailed: "Product nav synchronization is not changed.",
    navSyncProductRequired:
      "Please select only active product for nav synchronization.",
    productCloneRequired: "Please select one product for clone product.",
    cloned: "Product cloned successfully in the",
    notCloned: "Product is not cloned.",
    statusUpdated: "Product status is updated successfully.",
    statusNotUpdated: "Product status is not updated.",
    Deleted: "Product is deleted successfully.",
    notDeleted: "Product is not deleted successfully",
    bundleAdded:
      "Bundle product is added successfully. You can proceed next step.",
    bundleNotAdded: "Bundle product is not added successfully.",
    Updated: "Product Quantity is updated successfully.",
    notUpdated: "Product Quantity is not updated successfully.",
    updatedEmpty: "Product Quantity must not be empty.",
    valueNotUpdated:
      "Product Quantity contains Same value Please Update First.",
    deletePermanently:
      "Deleting this product will permanently remove this record from your account. This can't be undone.",
    export: {
      brand: "Brand is required.",
      vendor: "vendor is required.",
      fieldsname: "Column selection is required.",
      exportTypeRequired: "Export type required.",
      exportSuccess: "Data export completed.",
      importSuccess: "Data import completed.",
      exportFailed: "Data export is failed.",
      importFailed: "Data import is failed.",
      imageFileUpload: "File Upload successfully.",
      chooseOnlyCsv: "Choose only CSV file.",
      chooseOnlyZip: "Choose only zip file.",
    },
    notActive: "Product is not ready to Active. Please fill required details.",

    import: {
      ExportTypeError: "Please select an export type.",
    },

    productNotReady:
      "Product Is Not Ready completely, Please Complete This Product First",
  },
  attributes: {
    nameRequired: "Attribute name is required.",
    controlTypeIdRequired: "Control type is required.",
    controlTypeIdTypeError: "Control type must be a number.",
    textpromptRequired: "Text prompt is required.",
    attributeCreated: "Attribute is created successfully.",
    attributeNotCreated: "Attribute is not created.",
    attributeUpdated: "Attribute is updated successfully.",
    attributeNotUpdated: "Attribute is not updated.",
    attributeStatusUpdated: "Attribute status is updated successfully",
    attributeStatusNotUpdated: "Attribute status is not updated.",
    attributeDeleted: "Attribute is deleted successfully.",
    attributeNotDeleted: "Attribute is not deleted.",
    displayOrderRequired: "Display order is required.",
    displayOrderTypeError: "Display order must be a number.",
    attributePermanentDelete:
      "Deleting these attributes will permanently remove this record from your account. This can't be undone.",
  },

  brand: {
    nameRequired: "Brand name is required.",
    brandNotCreated: "Brand is not created.",
    vendorNotStored: "Vendor is not stored.",
    brandCreated: "Brand is created successfully.",
    brandUpdated: "Brand is updated successfully.",
    brandNotUpdated: "Brand is not updated.",
    brandStatusUpdated: "Brand status is updated successfully.",
    brandStatusNotUpdated: "Brand status is not updated.",
    brandDeleted: "Brand deleted successfully.",
    brandNotDeleted: "Brand is not deleted.",
    brandPermanentDelete:
      "Deleting this brand will permanently remove this record from your account. This can't be undone",
    notFound: "Brand not found.",
  },
  SlideShow: {
    title: "Title is required",
    author: "Author is required",
    notFound: "Gardening Slideshows not found.",
    updated: "Gardening Slideshows is updated successfully.",
    created: "Gardening Slideshows is created successfully.",
    notCreated: "Gardening Slideshows is not created successfully.",
    notUpdated: "Gardening Slideshows is not updated successfully.",
    SlideShowDeleted: "Gardening Slideshows deleted successfully.",
    minThree: "Min 3 charector is required",

    SlideName: "Slide name is required",
    SlideImagePath: "Image Path is required",
    SlidedisplayOrder: "Display Order is required",
    SlideSlideLink: "SlideLink is required",

    SlidesCreated: "Slide created successfull",
    SlidesNotCreated: "Slide not created",
    SlidesUpdated: "Slide updated successfully",
    SlidesNotUpdated: "Slide not updated",
    SlidesDeleted: "Slide Deleted successfully",
    SlidesNotDeleted: "Slide not deleted",
  },
  CategoryConfig: {
    CategoryConfigNameRequired: "Category name is required.",
    categoryConfigRequired: "Category config is required.",
    displayOrderRequired: "Display order is required.",
    displayOrderTypeError: "Invalid display order.",
    CategoryConfigDetailsCreated:
      "Category Config details are created successfully.",
    CategoryConfigDetailsNotCreated: "Category Config details are not created.",
    CategoryConfigDetailsUpdated:
      "Category Config details are updated successfully.",
    CategoryConfigDetailsNotUpdated: "Category Config details are not updated.",
    CategoryConfigCreated: "Category Config is created successfully.",
    CategoryConfigNotCreated: "Category Config is not created.",
    CategoryConfigUpdated: "Category Config is updated successfully.",
    CategoryConfigNotUpdated: "Category Config is not updated.",
    CategoryConfigStatusUpdated:
      "Category Config status is updated successfully.",
    CategoryConfigStatusNotUpdated: "Category Config status is not updated.",
    CategoryConfigDeleted: "Category Config is deleted successfully.",
    CategoryConfigDropdownrequired: "Category Config dropdown is required.",
    CategoryConfigNotDeleted: "Category Config is not deleted.",
    CategoryConfigPermanentDelete:
      "Deleting these Category Config will permanently remove this record from your account. This can't be undone.",
  },

  catalog: {
    catalogNameRequired: "Catalog name is required.",
    startDate: "StartDate is required.",
    endDate: "EndDate is required.",
    releaseDate: "ReleaseDate is required.",
    catalogCreated: "Catalog is created successfully.",
    catalogNotCreated: "Catalog is not created.",
    catalogUpdated: "Catalog is updated successfully.",
    catalogNotUpdated: "Catalog is not updated.",
    catalogDeleted: "Catalog is deleted successfully.",
    catalogNotDeleted: "Catalog is not deleted.",
    uploadCatalogURLRequired: "Upload catalog is required.",
    endDateGreaterStart: "EndDate cannot be before start Date.",
    releaseDateGreaterEnd: "Released date cannot be before End Date.",
    catalogStatusUpdated: "Catalog status is updated successfully.",
    catalogStatusNotUpdated: "Catalog status is not updated.",
    catalogPermanentDelete:
      "Deleting these Brand will permanently remove this record from your account. This can't be undone",
  },

  ProductConfig: {
    ProductConfigNameRequired: "Field name is required.",
    ProductConfigRequired: "Product config is required.",
    displayOrderRequired: "Display order is required.",
    displayOrderTypeError: "Invalid display order.",
    ProductConfigDetailsCreated:
      "Product Configurator details are created successfully.",
    ProductConfigDetailsNotCreated:
      "Product Configurator details are not created.",
    ProductConfigDetailsUpdated:
      "Product Configurator details are updated successfully.",
    ProductConfigDetailsNotUpdated:
      "Product Configurator details are not updated.",
    ProductConfigCreated: "Product Configurator is created successfully.",
    ProductConfigNotCreated: "Product Configurator is not created.",
    ProductConfigUpdated: "Product Configurator is updated successfully.",
    ProductConfigNotUpdated: "Product Configurator is not updated.",
    ProductConfigStatusUpdated:
      "Product Configurator status is updated successfully.",
    ProductConfigStatusNotUpdated:
      "Product Configurator status is not updated.",
    ProductConfigDeleted: "Product Configurator is deleted successfully.",
    ProductConfigNotDeleted: "Product Configurator is not deleted.",
    ProductConfigPermanentDelete:
      "Deleting these Product Configurator will permanently remove this record from your account. This can't be undone.",
  },

  category: {
    nameRequired: "Category name is required.",
    displayOrder: "Display order is required.",
    descriptionRequired: "Description is required.",
    collectionImageURlRequired: "Category image is required.",
    categoryCreated: "Category created successfully",
    categoryNotCreated: "Category is not created.",
    categoryUpdated: "Category updated successfully",
    categoryNotUpdated: "Category is not updated.",
    categoryStatusUpdated: "Category status updated successfully.",
    categoryStatusNotUpdated: "Category status is not updated.",
    categoryDeleted: "Category deleted successfully.",
    categoryNotDeleted: "Category is not deleted.",
    categoryPermanentDelete:
      "Deleting these Category will permanently remove this record from your account. This can't be undone.",
    seoUpdated: "seo updated successfully",
    seTitle: "Title is required.",
    seoNotUpdated: "seo is not updated.",
    seKeywords: "Keywords is required.",
    seDescription: "Description is required.",
    cartPagePolicyUpdated: "Cart Page Policy updated successfully",
    cartPagePolicyNotUpdated: "Cart Page Policy is not updated.",
    imageDeleted: "Image is deleted successfully",
    imageNotDeleted: "Image is not deleted",
    imageCreated: "Category Image is created successfully",
    imageNotCreated: "Category Image is not created",
    imageUpdated: "Category Image is updated successfully",
    imageNotUpdated: "Category Image is not updated",
    addProductShopGarden:
      "Selected Products is added successfully in Shop The Garden.",
    notAddProductShopGarden:
      "Selected Products is not added in Shop The Garden.",
    removeProduct: "Product is Removed successfully",
    notRemoveProduct: "Product is Not Removed",
  },

  color: {
    nameRequired: "Color name is required.",
    nameLength: "Color name is too long.",
    hexCodeRequired: "Hexcode is required.",
    borderColorRequired: "Border color is required.",
    textColorRequired: "Text color is required.",
    displayOrderRequired: "Display order is required.",
    matchesLength: "Enter a valid color code.",
    colorCreated: "Color is created successfully.",
    colorNotCreated: "Color is not created.",
    colorUpdated: "Color is updated successfully.",
    colorNotUpdated: "Color is not updated.",
    colorStatusUpdated: "Color status is updated successfully.",
    colorStatusNotUpdated: "Color status is not updated.",
    colorDeleted: "Color is deleted successfully.",
    colorNotDeleted: "Color is not deleted.",
    colorPermanentDelete:
      "Deleting these colors will permanently remove this record from your account. This can't be undone.",
  },

  quantityDiscount: {
    nameRequired: "Quantity discount name is required.",
    storeIdRequired: "Store is required.",
    cloneNameRequired: "Clone name is required.",
    storeIdTypeError: "Store must be a number.",
    quantityDiscountClone: "Quantity Discount cloned successfully",
    quantityDiscountNotCloned: "Quantity Discount is not cloned.",
    quantityDiscountCreated: "Quantity Discount is created successfully",
    quantityDiscountNotCreated: "Quantity Discount is not created.",
    quantityDiscountUpdated: "Quantity Discount is updated successfully",
    quantityDiscountNotUpdated: "Quantity Discount is not updated.",
    quantityDiscountStatusUpdated:
      "Quantity Discount status is updated successfully",
    quantityDiscountStatusNotUpdated:
      "Quantity Discount status is not updated.",
    quantityDiscountDeleted: "Quantity Discount is deleted successfully.",
    quantityDiscountNotDeleted: "Quantity Discount is not deleted.",
    quantityPermanentDelete:
      "Deleting this Quantity will permanently remove this record from your account. This can't be undone",
  },

  quantityDiscountDetail: {
    lowQuantityRequired: "Low Quantity is required.",
    lowQuantityTypeError: "Enter a valid low Quantity.",
    highQuantityRequired: "High Quantity is required.",
    highQuantityTypeError: "Enter a valid high Quantity.",
    highQuantityMin: "High Quantity must be greater than Low Quantity.",
    discountPercentRequired: "Discount percentage is required.",
    discountPercentTypeError: "Enter a valid discount percentage.",
    discountPercentMax: "Percentage should not be greater than 100.",
    quantityDiscountDetailCreated:
      "Quantity Discount details are created successfully.",
    quantityDiscountDetailNotCreated:
      "Quantity Discount details are not created.",
    quantityDiscountDetailUpdated:
      "Quantity Discount details are updated successfully.",
    quantityDiscountDetailNotUpdated:
      "Quantity Discount details are not updated.",
    quantityDiscountDetailStatusUpdated:
      "Quantity Discount details status are updated successfully.",
    quantityDiscountDetailStatusNotUpdated:
      "Quantity Discount details status are not updated.",
    quantityDiscountDetailDeleted:
      "Quantity Discount details are deleted successfully.",
    quantityDiscountDetailNotDeleted:
      "Quantity Discount details are not deleted.",
    discountAmountRequired: "Discount Amount is required.",
    discountAmountTypeError: "Enter a valid discount Amount.",
    discountAmountMax: "Amount should not be greater than 100.",
  },

  vendor: {
    nameRequired: "Vendor name is required.",
    navIdRequired: "NavId is required.",
    contactEmail: "Invalid contact Email.",
    contactPhoneMatches: "Invalid contact phone.",
    websiteMatches: "Enter the correct website.",
    imagePortalWebsiteMatches: "Enter a valid  image Portal Website.",
    imagePortalLoginMatches: "Enter a valid image portal login.",
    apiUrlRequired: "API URL is required.",
    apiUrlMatches: "Invalid API URL.",
    apiUsernameRequired: "API username is required.",
    apiPasswordRequired: "API password is required.",
    ftpUrlRequired: "FTP URL is required.",
    ftpUrlMatches: "Enter a valid FTP URL.",
    ftpUsernameRequired: "FTP username is required.",
    ftpPasswordRequired: "FTP password is required.",
    vendorCreated: "Vendor is created successfully.",
    vendorNotCreated: "Vendor is not created.",
    vendorUpdated: "Vendor is updated successfully.",
    vendorNotUpdated: "Vendor is not updated.",
    vendorStatusUpdated: "Vendor status update successfully",
    vendorStatusNotUpdated: "Vendor status is not updated.",
    vendorDeleted: "Vendor is deleted successfully.",
    vendorNotDeleted: "Vendor is not deleted.",
    vendorPermanentDelete:
      "Deleting these Vendors will permanently remove this record from your account. This can't be undone.",
    NavVendorIdFromNavSuccess: "Import from nav done.",
    NavVendorIdFromNavError: "Import from nav done.",
  },

  readiness: {
    nameRequired: "Readiness name is required.",
    percentageRequired: "Readiness publish percentage is required.",
    percentageTypeError: "Enter a valid percentage.",
    percentageMax: "Percentage should not be greater than 100.",
    storeIdRequired: "Store is required.",
    storeIdTypeError: "Store must be a number.",
    readinessCreated: "Readiness created successfully.",
    readinessNotCreated: "Readiness is not created.",
    readinessUpdated: "Readiness is updated successfully.",
    readinessNotUpdated: "readiness is not updated.",
    readinessStatusUpdated: "Readiness status is updated successfully.",
    readinessStatusNotUpdated: "Readiness status is not updated.",
    readinessDeleted: "Readiness is deleted successfully.",
    readinessNotDeleted: "Readiness is not deleted.",
  },

  readinessDetails: {
    fieldIdRequired: "Field is required.",
    percentageRequired: "Field percentage is required.",
    percentageTypeError: "Enter a valid percentage.",
    percentageMax: "Percentage should not be greater than 100.",
    readinessDetailsArray: "Readiness details have must.",
    readinessDetailsCreated: "Readiness details are created successfully.",
    readinessDetailsNotCreated: "Readiness details is not created.",
    readinessDetailsUpdated: "Readiness details are updated successfully.",
    readinessDetailsNotUpdated: "Readiness details are not updated.",
    readinessDetailsStatusUpdated:
      "Readiness details status is updated successfully.",
    readinessDetailsStatusNotUpdated:
      "Readiness details status is not updated.",
    readinessDetailsDeleted: "Readiness details are deleted successfully.",
    readinessDetailsNotDeleted: "Readiness details is not deleted.",
  },

  productTagMaster: {
    nameRequired: "Name is required.",
    imageRequired: "Image is required.",
    tagPositionId: "Position is required.",
    storeNameRequired: "Store name is required.",
    statusRequired: "status is required.",
    productTagTypeID: "Tag Type is required.",
    productTagMasterCreated: "ProductTag discount is created successfully.",
    productTagMasterNotCreated: "ProductTag discount is not created.",
    productTagMasterUpdated: "ProductTag discount is updated successfully.",
    productTagMasterNotUpdated: "ProductTag discount is not updated.",
    productTagMasterStatusUpdated:
      "ProductTag discount status is updated successfully.",
    productTagMasterStatusNotUpdated:
      "ProductTag discount status is not updated.",
    productTagMasterDeleted: "ProductTag discount deleted successfully.",
    productTagMasterNotDeleted: "ProductTag discount is not deleted.",
    productTagPermanentDelete:
      "Deleting productTag will permanently remove this record from your account. This can't be undone.",
  },

  promotions: {
    namerequired: "Discount name is required.",
    storeIdRequired: "Store is required.",
    discountcodeRequired: "Discount code is required.",
    discountValueRequired: "Discount value is required.",
    statusRequired: "Status is required.",
    startDateRequired: "Start Date is required.",
    startTimeRequired: "Start Time is required.",
    discountPercentage: "Discount percentage should be greater than 0",
    endDateRequired: "End Date is required.",
    endTimeRequired: "End Time is required.",
    recStatusRequired: "Recstatus is required.",
    PromotionsCreated: "Promotion are created successfully.",
    PromotionsNotCreated: "Promotion is not created successfully.",
    PromotionsUpdated: "Promotion is updated successfully.",
    PromotionsNotUpdated: "Promotion is not updated.",
    promotionStatusUpdated: "Promotion status is updated successfully.",
    promotionStatusNotUpdated: "Promotion status is not updated.",
    deleted: "Promotion is deleted successfully.",
    notDelete: "Promotion is not deleted.",
    deletePermanently:
      "Deleting these Promotions will permanently remove this record from your account. This can't be undone.",
    rangeMin: "Please enter a discount range.",
    rangeFrom: "Range from required.",
    rangeTo: "Range To required.",
    DiscountValue: "Discount is required.",
    minAmount: "Minimum amount required.",
    isLimitNoOfTimesValue: "Please enter a valid number.",
    rangeErrorMessage: "Please enter a valid value.",
    promotionNotFound: "Promotion coupon code not found.",
    DiscountPercentage: "Percentage Must.",
    isBrand: "Please select a brand.",
    isCategory: "Please select a category.",
    specificProduct: "Please select a specific product.",
  },

  productCustomFields: {
    nameRequired: "Configurator name is required",
    controlType: "Control type is required",
    created: "Product Custom Fields is created successfully.",
    notCreated: "Product Custom Fields is not created.",
    updated: "Product Custom Fields is updated successfully.",
    notUpdated: "Product Custom Fields is not updated.",
    deleted: "Product Custom Fields is deleted successfully.",
    notDeleted: "Product Custom Fields is not deleted.",
    productAvailabityName: "Product Availabity name is required",
    displayOrderNumber: "Display Order is required",
  },

  testimonial: {
    nameRequired: "Name is required.",
    authorRequired: "Author is required.",
    commentRequired: "Comment is required.",
    customerEmailRequired: "Customer email is required.",
    created: "Testimonial created successfully.",
    notCreated: "Testimonial not created.",
    updated: "Testimonial updated successfully.",
    notUpdated: "Testimonial not updated.",
    statusUpdated: "Testimonial status updated successfully.",
    statusNotUpdated: "Testimonial status not updated successfully updated.",
    deleted: "Testimonial deleted successfully.",
    notDeleted: "Testimonial not deleted.",
    deletePermanently:
      "Deleting these Testimonial will permanently remove this record from your account. This can't be undone.",
  },

  newsLetterArchive: {
    titleRequired: "Title is required.",
    authorRequired: "Author is required.",
    descriptionRequired: "Description is required.",
    pageUrl: "Page Url is Required",
    subDescriptionRequired: "Sub Description is required.",
    subtitleRequired: "Sub-Title is required.",
    created: "NewsLetter Archive created successfully.",
    notCreated: "NewsLetter Archive not created.",
    updated: "NewsLetter Archive updated successfully.",
    notUpdated: "NewsLetter Archive not updated.",
    statusUpdated: "NewsLetter Archive status updated successfully.",
    statusNotUpdated:
      "NewsLetter Archive status not updated successfully updated.",
    deleted: "NewsLetter Archive deleted successfully.",
    notDeleted: "NewsLetter Archive not deleted.",
    deletePermanently:
      "Deleting these NewsLetter Archive will permanently remove this record from your account. This can't be undone.",
  },

  profile: {
    myAccount: {
      imageRequired: "Please give a valid photo format (jpeg, jpg, gif, png).",
      firstNameRequired: "FirstName is required.",
      lastNameRequired: "LastName is required.",
      currentPasswordRequired: "Current password is required.",
      newPasswordRequired: "New password is required.",
      newPasswordMin: "Password must be at least eight characters.",
      newPasswordMax: "Password should not exceed more than 25 characters.",
      confirm_passwordRequired: "Confirm password is required.",
      confirm_passwordMatches: "Confirm Password doesn't match.",
      linkSend: "Link sent to given email address.",
      emailNotExists: "Email address does not exist.",
      emailSend: "Email sent to given email address.",
      emailNotSend: "Email is not sent.",
      minRole: "Minimum of 1 Role.",
      roleMustNeed: "Must have a Role.",
      maxRoleCharacter: "Role name must be greater than three characters.",
      roleNameRequired: "Role name is required.",
      roleCloned: "Role is cloned successfully.",
      roleNotCloned: "Role is not cloned successfully.",
      roleCreated: "Role is created successfully.",
      roleNotCreated: "Role is not created successfully.",
      roleUpdated: "Role is updated successfully.",
      roleNotUpdated: "Role is not updated successfully.",
      passwordChanged: "Password is changed successfully.",
      validPassword: "Please enter a valid, current password.",
      forgotPasswordLink: "Forgot password link sent to given email address.",
      roleDeleted: "Role is deleted successfully.",
      roleNotDeleted: "Role is not deleted successfully.",
      deletePermanently:
        "Deleting this Role will permanently remove this record from your account. This can't be undone.",
      linkHasExpired: "Your link has expired.",
    },
  },

  user: {
    userNotAvailable: "User is not available.",
    UserArray: "Must have User.",
    firstNameRequired: "FirstName is required.",
    lastNameRequired: "LastName is required.",
    emailRequired: "Email is required.",
    Email: "Invalid Email.",
    roleIdRequired: "Role is required.",
    roleIdTypeError: "Role must be a number.",
    userCloned: "User is cloned successfully.",
    userNotCloned: "User is not cloned.",
    created: "Users is created successfully.",
    notCreated: "Users is not created.",
    updated: "User is updated successfully.",
    notUpdated: "User is not updated.",
    userStatusNotUpdated: "User status is not updated.",
    userStatusUpdated: "User status is updated successfully.",
    userNotDeleted: "User is not deleted successfully.",
    userDeleted: "User is deleted successfully.",
  },

  userNotification: {
    userNotificationChanges: "Notification changes saved successfully.",
  },

  role: {
    roleNotAvailable: "Role is not available.",
    roleArray: "Must have Role.",
    firstNameRequired: "FirstName is required.",
    lastNameRequired: "LastName is required.",
    emailRequired: "Email is required.",
    Email: "Invalid Email.",
    roleIdRequired: "Role is required.",
    roleIdTypeError: "Role must be a number.",
    roleCloned: "Role is cloned successfully.",
    roleNotCloned: "Role is not cloned.",
    created: "Role is created successfully.",
    notCreated: "Role is not created.",
    updated: "Role is updated successfully.",
    notUpdated: "Role is not updated.",
    roleStatusNotUpdated: "Role status is not updated.",
    roleStatusUpdated: "Role status is updated successfully.",
    roleNotDeleted: "Role is not deleted successfully.",
    roleDeleted: "Role is deleted successfully.",
  },

  companyConfiguration: {
    fullNameRequired: "Full name is required.",
    shortNameRequired: "Short name is required.",
    emailRequired: "Email is required.",
    email: "Enter a valid email.",
    companyLogoURLRequired: "Company logo is required.",
    logoutTimeRequired: "Logout time is required.",
    loginType: "Please select at least one login type.",
    logoRequired: "Company logo is required.",
    created: "Company Configuration created successfully.",
    notCreated: "Company Configuration not Created Successfully.",
    updated: "Company Configuration Updated successfully.",
    notUpdated: "Company Configuration not Updated Successfully.",
  },

  themeConfiguration: {
    created: "ThemeConfiguration is created successfully.",
    notCreated: "ThemeConfiguration is not created.",
    updated: "ThemeConfiguration is updated successfully.",
    notUpdated: "ThemeConfiguration is not updated.",
    storeLogoUrlRequired: "Store logo is required.",
    headerLogoUrlRequired: "Header logo is required.",
    faviconUrlRequired: "Favicon logo is required.",
    emailLogoUrlRequired: "Email logo is required.",
    bFontFamilyRequired: "Body Font Family is required.",
    bFontSizeRequired: "Body Font size is required.",
    bFontWeightRequired: "Body Font weight is required.",
    bLineHeightRequired: "Body Font height is required.",
    bLetterSpacingRequired: "Body letter spacing is required.",
    sBgcolorRequired: "Sidebar BG color is required.",
    sbgActivecolorRequired: "Sidebar BG active color is required.",
    sbGhovercolorRequired: "Sidebar BG hover color is required.",
    sFontcolorRequired: "Sidebar font color is required.",
    sActiveColorRequired: "Sidebar active color is required.",
    sHoverColorRequired: "Sidebar hover color is required.",
    pFontFamilyRequired: "Page font family is required.",
    pFontSizeRequired: "Page font size is required.",
    pFontWeightRequired: "Page font-weight is required.",
    pLineHeightRequired: "Page line height is required.",
    pLetterSpacingRequired: "Page letter spacing is required.",
    cBgcolorRequired: "Button BG color is required.",
    cbgActivecolorRequired: "Button BG active color is required.",
    cbGhovercolorRequired: "Button BG hovers color is required.",
    cFontcolorRequired: "Button font color is required.",
    cActiveColorRequired: "Button active color is required.",
    cHoverColorRequired: "Button hover color is required.",
    primaryRequired: "Primary color is required.",
    secondaryRequired: "Secondary color is required.",
    redRequired: "Red color is required.",
    greenRequired: "Green color is required.",
    yellowRequired: "Yellow color is required.",
    loginPageStyleRequired: "Login page style is required.",
    loginBackgroundUrlRequired: "Login background image is required.",
  },

  navigation: {
    sequenceChanged: "Sequence is changed successfully.",
    sequenceNotChanged: "Sequence is not changed.",
    nameRequired: "Navigation name is required.",
    parentModuleIdTypeError: "Parent must be a number.",
    statusRequired: "Navigation status is required.",
    statusUpdated: "Navigation status is updated successfully.",
    statusNotUpdated: "Navigation status is not updated.",
    notDelete: "Navigation is not deleted successfully.",
    delete: "Navigation is deleted successfully.",
  },

  extension: {
    nameRequired: "Extension name is required.",
    parnetIdRequired: "Parent is required.",
    parnetIdTypeError: "Parent is must be a number.",
    navigationUrlRequired: "Navigation URL is required.",
    created: "Extension is created successfully.",
    notCreated: "Extension is not created.",
    updated: "Extension is updated successfully.",
    notUpdated: "Extension is not updated.",
    statusUpdated: "Extension status is updated successfully.",
    statusNotUpdated: "Extension status is not updated.",
    notDelete: "Extension is not deleted successfully.",
    delete: "Extension is deleted successfully.",
    notActionDelete: "Extension action is not deleted successfully.",
    actionDelete: "Extension action is deleted successfully.",
    deletePermanently:
      "Deleting these extension action will permanently remove this record from your account. This can't be undone",
  },

  action: {
    actionRequired: "Action is required.",
    httpMethodRequired: "HTTP Method is required.",
    urlPatternRequired: "URL pattern is required.",
  },

  customFilter: {
    name: "Name is required.",
    field: "Field is required.",
    operator: "Operator is required.",
    filterLength: "Please enter at least one filter.",
  },

  customer: {
    tierRequired: "Tier is required.",
    billingAddress1Required: "Billing Address1 is required.",
    billingCityRequired: "Billing City is required.",
    billingStateRequired: "Billing State is required.",
    billingCountryRequired: "Billing Country is required.",
    billingPostalCodeRequired: "Billing postal code is required.",
    shippingAddress1Required: "Shipping Address1 is required.",
    shippingCityRequired: "Shipping City is required.",
    shippingStateRequired: "Shipping State is required.",
    shippingCountryRequired: "Shipping Country is required.",
    shippingPostalCodeRequired: "Shipping postal code is required.",
    companyNameRequired: "Company name is required.",
    password: "Password is required.",
    confirm_passwordRequired: "Please Re-enter the password.",
    confirm_passwordMatches: "Password doesn't match.",
    customerNotFound: "Customer is not found.",
    created: "Customer is created successfully.",
    notCreated: "Customer is not created.",
    requiredNotes: "Notes are required.",
    notesCreated: "Notes created successfully.",
    notesNotCreated: "Notes not created.",
    emailRequired: "Email is required.",
    email: "Enter a valid email.",
    subjectRequired: "Subject is required.",
    emailBodyRequired: "Email body is required.",
    personalDetailUpdate: "Customer personal details updated successfully.",
    personalDetailNotUpdate: "Customer personal details not updated.",
    defaultAddress: "Default address is changed successfully.",
    defaultNotAddress: "Default address not change.",
    addAddress: "Address is added successfully.",
    updateAddress: "Address updated successfully.",
    failToAddAddress: "Address doesn't add.",
    failToUpdateAddress: "Address not updated.",
    taxChange: "Tax status is changed successfully.",
    taxNotChange: "Tax status doesn't change.",
    personalizationChange: "Personalization status is changed successfully.",
    personalizationChangeNotChange: "Personalization status doesn't change.",
    customerStatus: "Customer status is updated successfully.",
    customerNotStatus: "Customer status is not updated.",
    customerDeleted: "Customer is deleted successfully.",
    customerNotDeleted: "Customer is not deleted.",
    poNumberRequired: "PO number is required.",
    poCreated: "PO is saved successfully.",
    poNotCreated: "Po is not Saved.",
    tagCreated: "Tag is created successfully.",
    tagNotCreated: "Tag is not created.",
    tagDeleted: "Tag is deleted successfully.",
    tagNotDeleted: "Tag doesn't delete.",
    amount: "Amount is required.",
    notValidAmount: "Please enter a valid amount.",
    creditAmountRequired: "Credit Amount is required.",
    creditAmountAdded: "Credit Amount is added Successfully.",
    creditAmountNotAdded: "Credit Amount is not added Successfully.",
    reasonRequired: "Reason is required.",
    deletePermanently: "Are you sure you want to delete this Tier?",
    addressNotFound: "Customer Address is not found.",
    updated: "Customer updated successfully.",
    notUpdated: "Customer not updated.",
    resetPasswordLink: "Reset password link sent to given email address.",
    resetPasswordLinkNotSend: "Reset password link is not sent.",
    customerAddressDeleted: "Customer Address is deleted successfully.",
    customerAddressNotDeleted: "Customer Address is not deleted.",
    alphanumericOneToThirty:
      "Nav customer id is required and should be inbetween 1-30 alphanumeric words",
    customLogo: {
      logoSize: "Size of the logo image is required.",
      CustomLogoMessage: "Feedback Message Required.",
      feedBackSubmitted: "Feedback submitted successfully.",
      feedBackNotSubmitted: "Feedback not submitted.",
      logoApproved: "Logo Approved successfully.",
      logoNotApproved: "Logo not approved.",
    },
  },

  company: {
    corporateName: "Corporate name is required.",
    address1: "Address is required.",
    state: "State is required.",
    city: "City is required.",
    postal_code: "Postal code is required.",
    email: "Email is required.",
    webSite: "WebSite is required.",
    countryCode: "Country code is required.",
    zipCode: "Zip code is required.",
    companyNotFound: "Company is not found.",
    created: "Company is created successfully.",
    notCreated: "Company is not created.",
    statusUpdated: "Company status is changed successfully.",
    statusNotUpdated: "Company status is not changed.",
    deleted: "Company is deleted successfully.",
    notDeleted: "Company is not deleted.",
    updated: "Company is updated successfully.",
    notUpdated: "Company is not updated.",
  },
  // pageEditSetting: {
  //   topic: {
  //     topicNotUpdated: "Something went wrong.Please try again.",
  //     topicUpdated: "Topic successfully updated.",
  //   },
  //   general: {
  //     title: "Page name is required.",
  //     password: "Password is required.",
  //     pass_required: "Password expiration is required.",
  //   },
  //   metaData: {
  //     slug: "Content slug is required.",
  //     topic_title: "Page Title is required.",
  //     meta_description: "Meta Description is required.",
  //     meta_keywords: "Meta Keywords is required.",
  //   },
  // },
  bundle: {
    statusUpdated: "Bundle status is not updated.",
    statusNotUpdated: "Bundle status is updated successfully.",
    delete: "Bundle is deleted successfully.",
    notDelete: "Bundle is not deleted.",
    deletePermanently:
      "Deleting these Products will permanently remove this record from your account. This can't be undone.",
  },

  pageEditSetting: {
    topic: {
      topicNotUpdated: "Something went wrong.Please try again.",
      topicUpdated: "Topic successfully updated.",
      cloneSuccess: "Topic is cloned successfully.",
      topicNotClone: "Topic is not cloned successfully.",
      topicDeleted: "Topic is deleted successfully.",
      topicNotDeleted: "Topic is not deleted successfully.",
    },
    general: {
      title: "Page name is required.",
      password: "Password is required.",
      pass_required: "Password expiration is required.",
    },
    metaData: {
      slug: "Content slug is required.",
      topic_title: "Page Title is required.",
      meta_description: "Meta Description is required.",
      meta_keywords: "Meta Keywords is required.",
    },
  },

  pageCreate: {
    nameRequired: "Page name is required.",
  },

  tier: {
    storeIdRequired: "Please select a store.",
    nameRequired: "Tier name is required.",
    tierValueRequired: "Tier is required.",
    tierCreated: "Tier is created successfully.",
    tierNotCreated: "Tier is not created.",
    tierUpdated: "Tier is updated successfully.",
    tierNotUpdated: "Tier is not updated.",
    tierStatusUpdated: "Tier status update successfully.",
    tierStatusNotUpdated: "Tier status is not updated.",
    tierDeleted: "Tier is deleted successfully.",
    tierNotDeleted: "Tier is not deleted.",
    customTireRemoved: "Custom tire is removed successfully.",
    customTierNotRemoved: "Custom tire is not removed",
    tierPermanentDelete:
      "Deleting these Tier will permanently remove this record from your account. This can't be undone.",
  },

  template: {
    nameRequired: "Template name is required.",
    deletedSuccessFully: "Template deleted successfully.",
  },
  customCssConfigurationAlertMessage: {
    file_upload: "Custom CSS updated successfully.",
  },

  storeBuilder: {
    nameRequired: "Store name is required.",
    storeDisplayNameRequired: "Store Display name is required.",
    payBusinessMethodId: "Store Business method is required.",
    storeRequired: "Domain is required.",
    domainTypeText: "Please enter University / School Name",
    storeDeleted: "Store is deleted successfully.",
    storeStatusUpdated: "Store status is updated successfully.",
    setupCreated: "Store created successfully.",
    setupNotCreated: "Store not created.",
    setupUpdated: "Store updated successfully.",
    setupNotUpdated: "Store not updated.",
    email: "Email is required",
    general: {
      organizationId: "Business name is required.",
      sportId: "Category is required.",
      code: "Store code is required.",
      salesCode: "Sale code is required.",
      salesPersonId: "Sales person is required.",
      directAccessURL: "Store Access URL is required.",
      navCustomerId: "Nav customer ID is required.",
      navLocationCode: "Nav location code is required.",
      estimateShipDate: "Estimate ship date is required.",
      followUpdate: "Follow up date is required.",
      followUpDays: "Follow up days is required.",
      teamName: "Team name is required.",
      email: "Contact email is required.",
      openStoreOn: "Store Open date is required.",
      closeStoreOn: "Store close date is required.",
      firstName: "First name is required.",
      lastName: "Last name is required.",
      updated: "General information is updated successfully.",
      logourl: "Store Logo is required.",
      designation: "Designation is required.",
      department: "Department is required.",
      storeOwnerCompany: "Company is required.",
      storeStreetAddress: "Street address is required.",
      storeOwnerAPISuite: "API Suite is required.",
      zipCode: "Zip Code is required.",
      zipCodeLengthCheck: "Zip Code can not be more than 6 characters.",
      businessNameCreted: "Business Name Created Successfully.",
      streetAddress: "Street Address is required.",
    },

    paymentInfo: {
      updated: "Payment info is updated successfully.",
      notupdated: "Payment info is not updated.",
      collectBillingInfo: "Payment method is required.",
      paymentMethod: "Payment account is required.",
      shippingServiceId: "Shipping Service is Required",
      ExtraShippingMethodId: "Shipping Method is Required",
      shippingCharges: "Shipping charge is required.",
      poNumber: "PO number is required.",
      created: "Payment info is created successfully.",
      notcreated: "Payment info is not created.",
      manageCustomeFieldCreated: "Manage Custom Field created Successfully.",
      manageCustomeFieldNotCreated: "Manage Custom Field not created",
      manageCustomeFieldDeleted: "Manage Custom Field deleted Successfully.",
      manageCustomeFieldNotDeleted: "Manage Custom Field not deleted",
    },

    fees: {
      name: "Fees name is required.",
      type: "Fees type is required.",
      amount: "Fees amount is required.",
      minamount: "Fees amount must be greater than 0.",
      created: "Fee is created successfully.",
      notcreated: "Fees is not created.",
      updated: "Fee is updated successfully.",
      notupdated: "Fee is not updated.",
      deleted: "Fee is deleted successfully.",
      notDeleted: "Fee is not deleted.",
    },
    tier: {
      name: "Tier fee name is required.",
      amountFrom: "Tier fee amount is required.",
      amountTo: "Tier fee amount is required.",
      charge: "Tier fee is required",
      minamount: "Tier fee must be greater than 0",
      created: "Tier fee is created successfully.",
      updated: "Tier fee is updated successfully.",
    },

    taxes: {
      updated: "Taxes & fee is updated successfully.",
      notupdated: "Taxes & fee is not updated.",
      feesTax: "FeesTax is Created Successfully",
      NotfeesTax: "FeesTax is Not Created ",
      cardProcessingFee: "Card Processing Fee is Required",
    },

    coupon: {
      name: "Coupon name is required.",
      type: "Coupon type is required.",
      amount: "Coupon amount is required.",
      minamount: "Coupon amount must be greater than 0.",
      couponCodes: "Coupon code is required.",
      created: "Coupon is created successfully.",
      notcreated: "Coupon is not created.",
      updated: "Coupon is updated successfully.",
      notUpdated: "Coupon is not updated.",
      deleted: "Coupon is deleted successfully.",
      notDeleted: "Coupon is not deleted.",
    },

    messages: {
      updated: "Messages is updated successfully.",
      notUpdated: "Messages not updated.",
    },

    products: {
      cloneCreated: "Products clone created successfully.",
      cloneNotCreated: "Products clone has not been created.",
    },

    commonMessages: {
      minpercentage: "Fee must be greater than 0.",
      maxpercentage: "Fee must be less than or equal to 100.",
    },

    clone: {
      name: "Store Name is required.",
      code: "Store code is required.",
      url: "Store URL is required.",
      created: "Store clone has created successfully.",
      notCreated: "Store clone has not created.",
    },

    CustomFields: {
      CustomFieldsCreated: "Custom Fields created successfully.",
      CustomFieldsNotCreated: "Custom Fields has not been created.",
    },
    ShareReport: {
      created: "Share Report created successfully.",
      notCreated: "Share Report not created.",
      updated: "Share Report updated successfully.",
      notUpdated: "Share Report not updated.",
      selectOne: "Please select anyone share report",
    },

    ProductAdditionalPrice: {
      ProAddPriceNameRequired: "Name is required.",
      ProAddPriceAmountRequired: "Amount is required field.",
      ProAddPriceCreated: "Product Additional Price is created Successfully.",
      ProAddPriceNotCreated: "Product Additional Price is not created. ",
      ProAddPriceUpdated: "Product Additional Price is updated Successfully.",
      ProAddPriceNotUpdated: "Product Additional Price is not updated. ",
      ProAddPriceDeleted: "Product Additional Price is Deleted Successfully.",
      ProAddPriceNotDeleted: "Product Additional Price is not Deleted. ",
    },

    ProductCustomFields: {
      ProCusNameRequired: "Name is required.",
      ProCusChargesRequired: "Extra Price is required.",
      ProCustomFieldsCreated: "Product Custom Fields is created Successfully.",
      ProCustomFieldsNotCreated: "Product Custom Fields is not created. ",
      ProCustomFieldsUpdated: "Product Custom Fields is updated Successfully.",
      ProCustomFieldsNotUpdated: "Product Custom Fields is not updated. ",
      ProCustomFieldsDeleted: "Product Custom Fields is Deleted Successfully.",
      ProCustomFieldsNotDeleted: "Product Custom Fields is not Deleted. ",
    },
    Pdf: {
      pdfDownload: "PDF download successfully.",
      pdfNotDownload: "PDF download failed.",
    },
  },

  organization: {
    storeIdRequired: "Please select a store.",
    nameRequired: "Organization name is required.",
  },

  sport: {
    storeIdRequired: "Please select a store.",
    nameRequired: "Sport name is required.",
  },

  team: {
    storeIdRequired: "Please select a store.",
    nameRequired: "Team name is required.",
  },

  paymentGateway: {
    storeIdRequired: "Please select a store.",
    nameRequired: "Payment Gateway name is required.",
    privateKeyRequired: "Private Key is required.",
    publicKeyRequired: "Public Key is required.",
    customerIDRequired: "Customer ID is required.",
    accessURLRequired: "Access URL is required.",
    tokenRequired: "Token is required.",
  },

  order: {
    shippingAddressUpdated: "Shipping Address updated successfully.",
    billingAddressUpdated: "Billing Address updated successfully.",
    OrderUPdated: "Order updated successfully.",
    noteUpdated: "Order Note Updated successfully.",
    InternalNoteUpdated: "Internal Note Updated successfully.",
    ShippedNoteUpdated: "Shipped Note Updated successfully.",
    fileRequired: "File is required.",
    docDeleted: "Document Delete successfully.",
    docAdded: "Document Added successfully.",
    docNotAdded: "Document Not added.",
    tagName: "Tag Name is Required.",
    postTitle: "Please Enter Title.",
    postDescription: "Please Enter Description.",
    postStore: "Post created successfully.",
    postNotStore: "Post not Created.",
    statusUpdated: "Order status updated successfully.",
    statusNotUpdated: "Order status not updated.",
    Deleted: "Order Deleted successfully.",
    DeletedNot: "Order not Deleted.",
    trackingStored: "Tracking information updated successfully.",
    trackingNotStored: "Tracking information not updated.",
    fraud: "Order status change to fraud.",
    statusNotChange: "Order status change, not change.",
    trackingNo: "Tracking number is required.",
    shippingDate: "Shipping date is required.",
    shippedVIA: "Shipped via is required.",
    cancelOrder: "Order cancel successfully.",
    AlreadyCanceledOrder: "Order is already canceled.",
    orderNotCanceled: "Order failed to cancel.",
    duplicateOrder: "Order clone successfully.",
    orderNotDuplicate: "Order fail to clone.",
    reviewMailSend: "Order review mail sent successfully.",
    reviewMailNotSend: "Order review mail send, not send.",
    orderIPNotBlocked: "Order IP not blocked.",
    orderIPBlocked: "Order IP block successfully.",
    selectOrderForNav: "Please select order for NavSync.",
    navSync: "Orders sync successfully.",
    navNotSync: "Order fail to sync.",
    updateQty: "Product item quantity updated successfully.",
    updateNotQty: "Product item quantity not updated.",
    cancelOrderItem: "Order item cancel successfully.",
    cancelOrderItemFail: "Order item fails to cancel.",
    orderNotFound: "Order not found.",
    customLogoCreated: "Custom Logo Created SuccessFully",
    customLogoNotCreated: "Custom Logo Not Created",
    logoRequired: "Logo is required.",
    logoPositionRequired: "Logo Position is required.",
    CustomerNavIdUpdated: "Customer Nav ID is updated successfully.",
    CustomerNavIdNotUpdated: "Customer Nav ID is not updated.",
    downloadPerPersonalization: "Personalization downloaded successfully.",
    notDownloadPerPersonalization: "Personalization not downloaded.",
    shippingDetailsSaved: "Shipping data saved successfully",
    shippingDetailsNotSaved: "Shipping data not saved.",
    FillSomeMoreFields: "Please fill some more information.",
    orderSubTypeUpdated: "Order Sub Type updated successfully.",
    orderSubTypeNotUpdated: "Order Sub Type not updated.",
    orderSubTypeRequired: "Please select Product Sub type",
    reImportToNavSuccess: "Order Re-Import To Nav Successfully",
    reImportToNavFailed: "Order Re-Import To Nav Failed",
    cancelOrderItemsModalModule: "item from this order",
    cancelOrderItemsModalTitle: "Cancel Order Item",
    cancelOrderItemsModalStatus: "cancel",
    cancelOrderItemsModalButton: "Ok",
    carrier: "Please select carrier",

    issueRefund: "Issue Refund is required",
    issueRefundMax: "Issue Refund must be less than or equal to",
    storeCredit: "Store Credit is required",
    storeCreditMax: "Store Credit must be less than or equal to",
    reason: "Reason is required",
    quantity: "Quantity is required",
    quantityMax: "Quantity must be less than or equal to Available Quantity",
  },

  thirdPartyService: {
    nameRequired: "Third Party Services name is required.",
    thirdPartyServiceDropdown: "Third Party Services is required.",
    storeName: "Store Name is required.",
    thirdPartyCreated: "Third Party Service is created successfully.",
    thirdPartyNotCreated: "Third Party Service is not created.",
    thirdPartyUpdated: "Third Party Service is updated successfully.",
    thirdPartyNotUpdated: "Third Party Service is not updated.",
    thirdPartyStatusUpdated: "Third Party Service status update successfully.",
    thirdPartyStatusNotUpdated: "Third Party Service status is not updated.",
    thirdPartyDeleted: "Third Party Service is deleted successfully.",
    thirdPartyNotDeleted: "Third Party Service is not deleted.",
    thirdPartyPermanentDelete:
      "Deleting these Third Party Service will permanently remove this record from your account. This can't be undone.",
  },

  giftCard: {
    nameRequired: "Gift Card name is required.",
    priceRequired: "Price is required.",
    ourSKURequired: "Product SKU is required.",
    giftCardEnddate: "End Date is required.",
    imageRequired: "Gift Card image is required.",
    giftCardDeleted: "Gift Card deleted successfully.",
    giftCardNotDeleted: "Gift Card is not deleted.",
    giftCardCreated: "giftCard is created successfully.",
    giftCardUpdated: "Gift Card is updated successfully.",
    giftCardNotUpdated: "Gift Card is not updated.",
    giftCardNotCreated: "Gift Card is not created.",
    giftCardPermanentDelete:
      "Deleting Gift Card will permanently remove this record from your account. This can't be undone.",
    giftCardStatusUpdated: "Gift Card status is updated successfully.",
    giftCardStatusNotUpdated: "Gift Card status is not updated.",
  },

  paymentOptions: {
    nameRequired: "Payment Options name is required.",
    paymentOptionsNotCreated: "Payment Options is not created.",
    paymentOptionsCreated: "Payment Options is created successfully",
    paymentOptionsNotDeleted: "Payment Options deleted successfully.",
    paymentOptionsDeleted: "Payment Options deleted successfully.",
    paymentOptionsPermanentDelete:
      "Deleting  Payment Options will permanently remove this record from your account. This can't be undone",
    paymentOptionsStatusUpdated:
      "Payment Options status is updated successfully.",
    paymentOptionsStatusNotUpdated: "Payment Options status is not updated.",
    paymentOptionsUpdated: "Payment Options is updated successfully.",
    paymentOptionsNotUpdated: "Payment Options is not updated.",
  },

  shippingService: {
    nameRequired: "Shipping Service name is required.",
    shippingServiceNotCreated: "Shipping Service is not created.",
    shippingServiceCreated: "Shipping Service is created successfully.",
    shippingServiceDeleted: "Shipping Service deleted successfully.",
    shippingServiceNotDeleted: "Shipping Service Not deleted successfully.",
    shippingServicePermanentDelete:
      "Deleting  Shipping Service will permanently remove this record from your account. This can't be undone.",
    shippingServiceStatusUpdated:
      "Shipping Service status is updated successfully.",
    shippingServiceStatusNotUpdated: "Shipping Service status is not updated.",
    shippingServiceUpdated: "Shipping Service is updated successfully.",
    shippingServiceNotUpdated: "Shipping Service is not updated.",
    storeIdRequired: "Please select a store.",
  },

  CompanyResetPassword: {
    ResetPasswordSuccess: "Password Reset Link Sent Successfully.",
    ResetPasswordNotSuccess: "Password Reset Link is not sent.",
  },

  messageKey: {
    messageKeyRequired: "Message Key Name is required.",
    messageKeyNotCreated: "Message Key is not created.",
    messageKeyCreated: "Message Key is created successfully.",
    messageKeyDeleted: "Message Key deleted successfully.",
    messageKeyNotDeleted: "Message Key not deleted successfully.",
    messageKeyPermanentDelete:
      "Deleting  Message Key will permanently remove this record from your account. This can't be undone.",
    messageKeyStatusUpdated: "Message Key status is updated successfully.",
    messageKeyStatusNotUpdated: "Message Key status is not updated.",
    messageKeyUpdated: "Message Key is updated successfully.",
    messageKeyNotUpdated: "Message Key is not updated.",
  },

  message: {
    messageRequired: "Message is required.",
    messageNotCreated: "Message is not created.",
    messageCreated: "Message is created successfully.",
    messageDeleted: "Message deleted successfully.",
    messageNotDeleted: "Message not deleted successfully.",
    messagePermanentDelete:
      "Deleting Message will permanently remove this record from your account. This can't be undone.",
    messageStatusUpdated: "Message status is updated successfully.",
    messageStatusNotUpdated: "Message status is not updated.",
    messageUpdated: "Message is updated successfully.",
    messageNotUpdated: "Message is not updated.",
    messageKeyIdRequired: "Message key is required.",
    storeIdRequired: "Please select a store.",
  },

  emailTemplate: {
    storeIdRequired: "Please select a store.",
    emailTemplateSubjectRequired: "Subject is required.",
    emailBodyRequired: "Email body is required.",
    emailTemplateLabelRequired: "Email Template label is required.",
    emailTemplateNotCreated: "Email Template is not created.",
    emailTemplateCreated: "Email Template is created successfully.",
    emailTemplateDeleted: "Email Template deleted successfully.",
    emailTemplateNotDeleted: "Email Template not deleted successfully.",
    emailTemplatePermanentDelete:
      "Deleting the email template will permanently remove this record from your account. This can't be undone.",
    emailTemplateStatusUpdated:
      "Email Template status is updated successfully.",
    emailTemplateStatusNotUpdated: "Email Template status is not updated.",
    emailTemplateUpdated: "Email Template is updated successfully.",
    emailTemplateNotUpdated: "Email Template is not updated.",
    emailTemplateKeyIdRequired: "Please select a store.",
  },

  shippingMethod: {
    shippingVia: "Shipping Via is required.",
    charges: "Shipping Method Charges is required.",
    nameRequired: "Shipping Method name is required.",
    shippingServicesIdRequired: "Please Select Shipping Service.",
    shippingMethodNotCreated: "Shipping Method is not created.",
    shippingMethodCreated: "Shipping Method is created successfully.",
    shippingMethodDeleted: "Shipping Method deleted successfully.",
    shippingMethodNotDeleted: "Shipping Method not deleted successfully.",
    shippingMethodPermanentDelete:
      "Deleting  Shipping Method will permanently remove this record from your account. This can't be undone.",
    shippingMethodStatusUpdated:
      "Shipping Method status is updated successfully.",
    shippingMethodStatusNotUpdated: "Shipping Method status is not updated.",
    shippingMethodUpdated: "Shipping Method is updated successfully.",
    shippingMethodNotUpdated: "Shipping Method is not updated.",
    storeIdRequired: "Please select a store.",
  },

  shippingCharge: {
    charge: "Shipping Charge is required.",
    orderTotalMin: "Order Total Minimum is required.",
    orderTotalMax: "Order Total Maximum is required.",
    shippingChargeIdRequired: "Please Select Shipping Service.",
    shippingChargeNotCreated: "Shipping Charge is not created.",
    shippingChargeCreated: "Shipping Charge is created successfully.",
    shippingChargeDeleted: "Shipping Charge deleted successfully.",
    shippingChargeNotDeleted: "Shipping Charge not deleted successfully.",
    shippingChargePermanentDelete:
      "Deleting Shipping Charge will permanently remove this record from your account. This can't be undone.",
    shippingChargeStatusUpdated:
      "Shipping Charge status is updated successfully.",
    shippingChargeStatusNotUpdated: "Shipping Charge status is not updated.",
    shippingChargeUpdated: "Shipping Charge is updated successfully.",
    shippingChargeNotUpdated: "Shipping Charge is not updated.",
    storeIdRequired: "Please select a store.",
    maximumOrderTotal:
      "Maximum OrderTotal must be greater than Minimum OrderTotal",
  },

  commonExport: {
    success: "Data export completed.",
    failed: "Data export is failed.",
  },

  table: {
    stored: "Table view saved successfully.",
    notStored: "Table view not saved.",
  },

  newsletter: {
    unsubscribe: "User is Unsubscribed Successfully",
    notunsubscribe: "User is not Unsubscribed",
  },

  cache: {
    selectBrand: "Please select a brands.",
    selectStore: "Please select a store.",
    clearBrandCache: "Brands cache clear successfully.",
    brandCacheNotClear: "Brands cache not clear.",
    selectCategory: "Please select a Categories.",
    clearCategoryCache: "Categories cache clear successfully.",
    CategoryCacheNotClear: "Categories cache not clear.",
    clearHomeCache: "Home cache clear successfully.",
    clearHomeCacheCacheNotClear: "Home cache not clear.",
  },
  cmsConfig: {
    themeStored: " Theme updated successfully.",
    themeNotStored: " Theme not updated.",
    banner: {
      bannerLinkAdded: "Banner link added successfull",
      bannerLinkNotAdded: "Banner link not added ",
      addSomeBannerLinks: "Please add some banner link first.",
    },
    headerConfig: {
      headerNotUpdated: "Header is Not Updated.",
      headerUpdated: "Header Updated Successfully.",
    },
    FieldsAreMissing: "Please fill up some details",
  },
  formBuilder: {
    name: "Name is required.",
    email: "Email is required.",
    url: "Url is required.",
    parentStore: "Parent Store is required.",
    invalidEmail: "Invalid email format.",
    storeCode: "Store Code is required.",
    formCreated: "Form created successfully.",
    formNotCreated: "Form not created successfully.",
    formUpdated: "Form updated successfully.",
    formNotUpdated: "Form not updated successfully.",
    formFieldUpdated: "Form Field updated successfully.",
    formFieldNotUpdated: "Form Field not updated successfully.",
    formBuilderStatusUpdated: "Form builder status updated successfully.",
    formBuilderStatusNotUpdated:
      "Form builder status not updated successfully.",
    formBuilderAddedProductStatusUpdated:
      "Product status updated successfully.",
    formBuilderAddedProductStatusNotUpdated:
      "Product status not updated successfully.",
    fieldsUpdated: "Form fields updated successfully",
    fieldsCreated: "Form fields created successfully",
    totalPages: "Form Length is required.",
    productUpdated: "Product Updated SuccessFully",
    productNotUpdated: "Product Not Updated",
    putSomeAdditionalPrice: "You need to put some additional price.",
    pageNameRequired: "Please enter page name",
    navLocationRequired: "Nav location code is required",
    navCustomerIdRequired: "Nav customer is is required",
    maxCharacters: "Only 8 characters allowed",
    onlyAlphabets: "Only alphabets allowed",
    published: "Published successfully",
    tenDigitsAllowed: "Please enter 10 digits",
    clone: {
      name: "Form Name is required",
      url: "Form URL is required",
      validateUrl: "Please enter valid Form URL",
      formtype: "Form Type is required",
      storeCode: "Store Code is required",
      created: "Form clone has created successfully",
      notCreated: "Form clone has not created",
    },
    exception: "Some error occured",
    startDateRequired: "Start date is required",
    endDateRequired: "End date is required",
  },
  appConfig: {
    create: "App config created successfully.",
    NotCreate: "App config not created.",
    update: "App config Updated successfully.",
    NotUpdate: "App config not updated.",
    statusChanged: "App config status changed successfully.",
    statusNotChanged: "App config status not change.",
    delete:
      "Deleting these App Config will permanently remove this record from your account. This can't be undone.",
    name: "Name is required.",
    value: "Value is required.",
    store: "Store is required.",
  },

  fixCharges: {
    nameRequired: "name is required.",
    charges: "charges is required.",
    fixChargesCreated: "Fix Charges is created successfully.",
    fixChargesNotCreated: "Fix Charges is not created.",
    fixChargesUpdated: "Fix Charges is updated successfully.",
    fixChargesNotUpdated: "Fix Charges is not updated.",
    fixChargesDeleted: "Fix Charges deleted successfully.",
    fixChargesNotDeleted: "Fix Charges not deleted successfully.",
    fixChargesPermanentDelete:
      "Deleting  Fix Charges will permanently remove this record from your account. This can't be undone.",
    fixChargesStatusUpdated: "Fix Charges status is updated successfully.",
    fixChargesStatusNotUpdated: "Fix Charges status is not updated.",
  },
  topic: {
    publishSuccess: "Page published successfully.",
    publishError: "Unable to publish the page. Please try again Later.",
    saveSuccess: "Page saved successfully.",
    saveError: "Unable to save the page. Please try again Later.",
  },
  storiesCategory: {
    categoryRequired: "Category is required.",
    storiesCategoryCreated: "Stories Category is created successfully.",
    storiesCategoryNotCreated: "Stories Category is not created.",
    storiesCategoryUpdated: "Stories Category is updated successfully.",
    storiesCategoryNotUpdated: "Stories Category is not updated.",
    storiesCategoryDeleted: "Stories Category deleted successfully.",
    storiesCategoryNotDeleted: "Stories Category not deleted successfully.",
    storiesCategoryPermanentDelete:
      "Deleting  Stories Category will permanently remove this record from your account. This can't be undone.",
    storiesCategoryStatusUpdated:
      "Stories Category status is updated successfully.",
    storiesCategoryStatusNotUpdated: "Stories Category status is not updated.",
  },
  jsonParser: {
    notAValidJson: "string is not a valid JSON.",
  },

  manageBulkTier: {
    updated: "Manage Bulk Tier updated successfully.",
    notUpdated: "Manage Bulk Tier not updated.",
    navCustomerId: "Customer Number is required.",
    currentTier: "Please select Tier.",
  },
  widgetModuleMapping: {
    widget: "Please select a widget",
    modules: "Please select a module",
    created: "Widget Module Created Successfully.",
    notCreated: "Widget Module not Created Successfully.",
    updated: "Widget Module Updated Successfully.",
    notUpdated: "Widget Module not Updated Successfully.",
    deleted: "Widget Deleted Successfully",
    notDeleted: "Widget Not Deleted",
  },

  formBuilderBannerImage: {
    bannerImageRequired: "Image is required",
    bannerImagePositionRequired: "Image position is required",
    bannerTextPositionRequired: "Text position is required",
    bannerTextRequired: "Text is required",
    samePositionError: "Cannot be same as Image position",
    bannerCreated: "Banner created successfully",
    bannerUpdated: "Banner updated successfully",
  },

  decimalNumber: {
    decimalNumber: "Please enter valid value",
  },
  CustomerReview: {
    statusChanged: "CustomerReview Status changed ",
    statusNotChange: "CustomerReview Status not change",
  },

  consultationRequestStatus: {
    statusChanged: "Consultation Request Status changed to",
    statusNotChange: "Consultation Request Status not change",
  },

  orderPaymentPendingEmail: {
    ResetPasswordSuccess: "Mail Sent Successfully.",
    ResetPasswordNotSuccess: "Mail not sent.",
  },

  customerApproveRejectModel: {
    CustomerApproveSuccess: "Customer Application Approved successfully.",
    CustomerNotApprove: "Customer Application not Approved",
  },

  customerGiftCard: {
    recipientName: "Recipient Name is Required",
    storeNameRequired: "Store is Required",
    customerGiftCardCreated: "Customer Gift Card is created successfully",
    customerGiftCardNotCreated: "Customer Gift Card is not created",
    customerGiftCardUpdated: "Customer Gift Card is updated successfully",
    customerGiftCardNotUpdated: "Customer Gift Card is not updated",
  },

  pageRedirect: {
    storeNameRequired: "Store is Required",
    oldUrl: "Old URL is Required",
    newUrl: "New URL is Required",
    pageRedirectCreated: "Page Redirect is created successfully",
    pageRedirectNotCreated: "Page Redirect is not created",
    pageRedirectDeleted: "Page Redirect deleted successfully.",
    pageRedirectNotDeleted: "Page Redirect not deleted successfully.",
  },

  productInventory: {
    update: "Product Inventory updated successfully",
    notUpdated: "Product Inventory is not updated",
  },

  itemCountMaxinum: {
    updateRange: "Ship Date Range is updated successfully",
    notUpdateRange: "Ship Date Range is not updated",
    updateItemCount: "Item Count is updated successfully",
    notUpdateItemCount: "Item Count is not updated",
  },
};
